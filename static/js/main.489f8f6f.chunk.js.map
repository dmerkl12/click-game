{"version":3,"sources":["components/Header/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","children","score","highscore","Card","onClick","startClick","id","alt","name","src","image","Wrapper","App","useState","cards","friendState","setFriendState","pointState","setPointState","topScoreState","setTopScoreState","find","o","i","clicked","sort","Math","random","gameOver","console","log","forEach","friend","alert","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0+DAaeA,G,MAVA,SAAAC,GAAK,OAElB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SAASD,EAAME,UAC9B,yBAAKD,UAAU,UAAf,UACUD,EAAMG,MADhB,eACmCH,EAAMI,cCK9BC,G,MAVF,SAAAL,GACX,OACI,yBAAKC,UAAU,OAAOK,QAAS,kBAAMN,EAAMO,WAAWP,EAAMQ,MAC5D,yBAAKP,UAAU,iBACb,yBAAKQ,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,YCA1BC,G,MAJC,SAAAb,GACd,OAAO,yBAAKC,UAAU,WAAWD,EAAME,Y,aC6D1BY,MA1Df,WAAgB,IAAD,EAEyBC,mBAASC,GAFlC,mBAENC,EAFM,KAEOC,EAFP,OAGuBH,mBAAS,GAHhC,mBAGNI,EAHM,KAGMC,EAHN,OAI6BL,mBAAS,GAJtC,mBAINM,EAJM,KAISC,EAJT,KAORf,EAAa,SAAAC,GACjB,OAAOS,EAAYM,MAAK,SAACC,EAAGC,GAC1B,OAAID,EAAEhB,KAAOA,IAEa,IAArBQ,EAAMS,GAAGC,SACXV,EAAMS,GAAGC,QAAUV,EAAMS,GAAGC,QAAU,EACtCN,EAAcD,EAAa,GAC3BD,EAAeD,EAAYU,MAAK,kBAAMC,KAAKC,SAAW,QAItDC,KAEK,OAMNA,EAAW,WAYlB,OAXMX,EAAaE,IACfC,EAAiBH,GACjBY,QAAQC,IAAIX,IAEdJ,EAAYgB,SAAQ,SAAAC,GAClBA,EAAOR,QAAU,KAEnBS,MAAM,mCAAD,OAAoChB,IACzCC,EAAc,GACdF,EAAeD,EAAYU,MAAK,kBAAMC,KAAKC,SAAW,QAEjD,GAIH,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQ1B,MAAOgB,EAAYf,UAAWiB,GAAtC,eACCJ,EAAYmB,KAAI,SAAAF,GAAM,OACrB,kBAAC,EAAD,CACA3B,WAAYA,EACVC,GAAI0B,EAAO1B,GACX6B,IAAKH,EAAO1B,GACZI,MAAOsB,EAAOtB,aC7CN0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.489f8f6f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = props => ( \n   \n  <div className=\"header\">\n    <div className=\"title\">{props.children}</div>\n    <div className=\"scores\">\n      Score: {props.score} Highscore: {props.highscore}\n    </div>\n  </div>\n  )\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = props => {\n  return (\n      <div className=\"card\" onClick={() => props.startClick(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, {useState} from \"react\";\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./friends.json\";\nimport \"./App.css\";\n\nfunction App() {\n  \n  const [friendState, setFriendState] = useState(cards);\n  const [pointState, setPointState] = useState(0);\n  const [topScoreState, setTopScoreState] = useState(0);\n\n\n const startClick = id => {\n   return friendState.find((o, i) => {\n     if (o.id === id) {\n\n      if (cards[i].clicked === 0) {\n        cards[i].clicked = cards[i].clicked + 1;\n        setPointState(pointState + 1)\n        setFriendState(friendState.sort(() => Math.random() - 0.5))\n        \n      }\n      else {\n        gameOver();\n      }\n      return true;\n     }\n     return false;\n   });\n }\n\n const gameOver = () => {\n  if (pointState > topScoreState) {\n    setTopScoreState(pointState)\n    console.log(topScoreState)\n  }\n  friendState.forEach(friend => {\n    friend.clicked = 0;\n  });\n  alert(`Better luck next time! \\nscore: ${pointState}`);\n  setPointState(0)\n  setFriendState(friendState.sort(() => Math.random() - 0.5));\n\nreturn true;\n}\n    \n\n    return (\n      <Wrapper>\n        <Header score={pointState} highscore={topScoreState}>Clicky game</Header>\n        {friendState.map(friend => (\n          <Card\n          startClick={startClick}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}